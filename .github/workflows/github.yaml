name: Reuseable container workflow

env:
  NVCHECKER_VERSION: 2.18
  DFUPDATE_VERSION: 1.0.0
  GH_TOKEN: ${{ github.token }}

# Provide inputs that control image tagging
on:
  workflow_call:
    inputs:
      # Provide a bash command that will create the image tag
      TAG_COMMAND:
        required: false
        type: string
      # Provide a Dockerfile ENV var that will be used for the image tag
      IMAGE_TAG:
        required: false
        type: string

jobs:

  # Run a standard build only on PR/MR create
  build-only:
    name: Container build
    if: github.event_name == 'pull_request'
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - run: env | sort
      - run: docker build -t "${GITHUB_REPOSITORY}:$(date +%s)" .

  # Run nvchecker and dfupdate, then check if any updates were performed
  check-for-changes:
    name: Check for container update changes
    if: github.event_name == 'schedule' || github.event_name == 'workflow_dispatch'
    runs-on: ubuntu-latest
    outputs:
      changed: ${{ steps.check_changes.outputs.changed }}
    steps:
      - uses: actions/checkout@v3
      - run: echo "TAG_COMMAND=${{ inputs.TAG_COMMAND }}" >> $GITHUB_ENV
      - run: echo "IMAGE_TAG=${{ inputs.IMAGE_TAG }}" >> $GITHUB_ENV
      - run: env | sort
      - run: echo ${{ secrets.DOCKER_PASSWORD }} | docker login -u "$GITHUB_REPOSITORY_OWNER" --password-stdin
      - run: git clone https://github.com/docker-library/official-images.git ~/official-images
      - run: docker run --rm --name nvchecker --mount type=bind,source=${PWD},target=/data/ -w /data snw35/nvchecker:${NVCHECKER_VERSION} nvchecker -l debug -c nvchecker.toml
      - run: docker run --rm --name dfupdate --mount type=bind,source=${PWD},target=/data/ -w /data snw35/dfupdate:${DFUPDATE_VERSION}
      - id: check_changes
        run: |
          if [[ $(git status --porcelain | wc -l) -eq 0 ]]; then
            echo "No local changes detected, nothing to build, exiting."
            echo "changed=false" >> $GITHUB_OUTPUT
          else
            echo "Local changes detected, continuing..."
            echo "changed=true" >> $GITHUB_OUTPUT
          fi

  # If updates were made, build and push the updated image, and commit them to the repo
  container-update:
    name: Automated container update
    needs: check-for-changes
    if: needs.check-for-changes.outputs.changed == 'true'
    runs-on: ubuntu-latest
    permissions:
      contents: write
    steps:
      - uses: actions/checkout@v3
      - run: echo "TAG_COMMAND=${{ inputs.TAG_COMMAND }}" >> $GITHUB_ENV
      - run: echo "IMAGE_TAG=${{ inputs.IMAGE_TAG }}" >> $GITHUB_ENV
      - run: env | sort
      - run: echo ${{ secrets.DOCKER_PASSWORD }} | docker login -u "$GITHUB_REPOSITORY_OWNER" --password-stdin
      - run: git clone https://github.com/docker-library/official-images.git ~/official-images
      - run: docker run --rm --name nvchecker --mount type=bind,source=${PWD},target=/data/ -w /data snw35/nvchecker:${NVCHECKER_VERSION} nvchecker -l debug -c nvchecker.toml
      - run: docker run --rm --name dfupdate --mount type=bind,source=${PWD},target=/data/ -w /data snw35/dfupdate:${DFUPDATE_VERSION}
      - run: echo "BASE_VERSION=$(grep 'FROM' Dockerfile | cut -d ' ' -f 2 | cut -d ':' -f 2)" >> $GITHUB_ENV
      - run: echo "ENV_VERSIONS=$(grep '^ENV .*_VERSION .*' Dockerfile | cut -d ' ' -f 3 | tr '\n' '-')" >> $GITHUB_ENV
      - run: echo "PROPOSED_TAG=${ENV_VERSIONS}-${BASE_VERSION}" >> $GITHUB_ENV
      - run: |
          if [[ -z "${IMAGE_TAG}" ]]; then
            echo "DOCKER_TAG=$PROPOSED_TAG" >> $GITHUB_ENV
          else
            echo "DOCKER_TAG=$(grep "^ENV $IMAGE_TAG .*" Dockerfile | cut -d ' ' -f 3)" >> $GITHUB_ENV
          fi
      - run: |
          if [[ ! -z "${TAG_COMMAND}" ]]; then
            echo "DOCKER_TAG=$($TAG_COMMAND)" >> $GITHUB_ENV
          fi
      - run: echo "IMAGE=${GITHUB_REPOSITORY}:${DOCKER_TAG}" >> $GITHUB_ENV
      - run: git config --local user.name "$GITHUB_REPOSITORY_OWNER"
      - run: git config --local user.email "snw35@use.startmail.com"
      - run: git remote add upstream https://${GH_TOKEN}@github.com/${GITHUB_REPOSITORY}.git > /dev/null 2>&1
      - run: |
          if [ $(git ls-remote --tags upstream "${PROPOSED_TAG}" | wc -l) -eq 0 ]; then
            echo "Proposed tag does not exist on remote, continuing."
            # ... your tagging logic here ...
          else
            echo "Tag already exists, skipping."
          fi

      # Create a GitHub release if tag was pushed (and changes were detected)
      - name: Create GitHub Release
        uses: softprops/action-gh-release@v2
        with:
          tag_name: ${{ env.DOCKER_TAG }}
          name: Release ${{ env.DOCKER_TAG }}
          body: |
            Automated container release for ${{ env.DOCKER_TAG }}
            
            Changes:
            - List your changes here or automate changelog generation.
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
