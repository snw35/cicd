os: linux
dist: focal
services: docker
language: shell

env:
  global:
  - NVCHECKER_VERSION=2.3
  - DFUPDATE_VERSION=0.1.0
  - secure: QKM7+OHW8jE0OyyiLr0VK9cFnEDsoy0IzWzXt0t4pbDJpk4+yXRkseKtFskLwSoCPfvKDk0KlW16aN8dWOqSmW1achvMvX0xVz2g5GaBtZuaG5MuDvJzwAfbTVIkdm7L5yPbh1uPt7GY2PKt+cMdNFi9Hx/V4N79ZRJVczphch9kC76vBi3I5/prLwDVD3vR7QAxyUvm9ZtsKl+p5eWvvJFfSGCPHk8pNpsDIDxQRypcF4mpYP6v3zff+LZBJGnOpkRcufdGV29QwJbtXf++F7AA7NzjUKpnlJk+zaPkywUBA9lR7/XikDZlk8SATa+Aa3dXGqtnZ2v0GLlDNlovk48+uXotJWEDPi7E4BPZnY6P2y5FbDWyj+E8W3ujZkHcRnZNuMBayBqbaah3WAWaS++UlWAZeKjp73PYaOt+gHTvypgTa4v8GPaHXQ1IZ+sovhVAFx5P+qo7kLsJ7hbNC2wQ3V96lMb9gmlXjn3HyDrtEDtgT2VkS/qZY9MvwJHuZrnd1vQlbc4/k63wmXGL13AFD8w7kElq7Imz+PcufxmU6UAcZNsmWFjeRRe08i3WKoSv8+kurD9WtdayPrA+LKOA43dKCysOVvdVnXXeXf3Fbg7bYN77rCJrjhfLFGLluMA+g7k2ScShUM30oDSME4r/w0rDznPChDR1Gd+Hnso=
  - secure: WfOjMCJLIQGZ+RXyrYnXtRf1Thlzz5WurMFg34CDvZuTQKhfAmNvzjLBN/M+gapCYLw+ar8XvAaGu2NlGsQOC0SkDBCnzbPVtJ93v0j5xtz/TKjA72GPqJsuzDF6NXE1s0ZE7REbNaxjnCLTkEBGLWnBwRMd7RnE7Al1artjt8PBlsyV1bATVPU92Jx74zcMPaULGjuJfxWB5GBvrGMInTTuy67M4ZRcbfj6cmfRnQU+ordj5xoPhaqRstL5u2sVmHB+8NUecAuvDiIQJx9yX2xr+koPvGOPQNBaynSX3O/ndis25JL0AfyeRjtf+MvY1gjTYudQwxiHwRTy45PQSva6Ra5j2cUgf8/+2XQYRjhLLCHeUAYCX3BE403UVLLoXzhr+tWm3qFOJcq8Bo32tD9zEZrW7cRNLtK+3o8vuaZqIVkP4iqE9On7UwMq0gW/D9Wi7kaiKxWjuHI5EHzYrotqflHMsVVzThlMJYNnWiz2WprS+IkYEGhU3pzqJWAqErAPNTEreiwl5DlrUIceE9q3/vd+SR0C5r/RoQOsP3jwvGvMMrWYQv1VYr7in5FiYDco+wdqBLAlslXyplTQy4KbNBA8EKZ2T0hAYngCuk7zwukFZA0VBftIfU2ilBS4JCbXcKSU4o94py5upgvZBfQY7XnQnrqwGIpSHcG+0VQ=
  - secure: OSGqTB8MTJ7ToaEUyi92UTTx80wphW+d5jvbCC3qWbV1K9HQsnQD2CbgpYzy88iyrPTK/RLV2e0019ZzPu8aXo0BGKsSwHzG/qw9PVVl+SJ3XRQECdujLwXlnfUZsMtG4ezxMZOxDTbIwsNs9/lCx1els9z+bZwM8BIynr/D/62OWRYnxaj0KplfwNLyIFPZdRPTENAdKKgtjs9mCiGgeK6AEGvDtIbEOrpv8Y0VIMuWbBMozCGNeu1A734BnHjM8fl26x4EMKrKWpm+R91UmzgomMN0LlrOaauIrZVmKxOuVRMIpexmiSSNvmp32osKkpnLMHZntztWPPmqIk4f6LRlRmwFFKH7E7d7OmI9U7zMtytyc9JImIMRAc2/KNPqvZxXDaDVrTZCz/T0pc+bR+rjFpSr/l01+mq5VwgVLXdTCbmZegGUYGvN+Q9T7fBBhqilJOdnolM6xhAef6iolsunctm+5w5bjHt+0eQj/CTkfAetVwUPSFrwyyUWi7SlOsN/W8lMCrpCJEPuIjx5/CvX32cjhO3WZKe9HBNM8MBccoRzYf7QkwvqhRNprrWYzdyTcVpj7OU5dhQMbgM9ydzEkdOKsSSVsN7oglgIXnExqfG53UjjfMiRXos3bHQiPNSFwR/wmwaUsLrIefw5OmXhDSg7jaMC05RCaAS5a9s=

install:
  - env | sort
  - echo "$DOCKER_PASSWORD" | docker login -u "$DOCKER_USERNAME" --password-stdin
  - git clone https://github.com/docker-library/official-images.git ~/official-images
  - docker run -it --rm --name nvchecker --mount type=bind,source=${PWD},target=/data/ -w /data -e NVCHECKER_GITHUB_TOKEN=${GH_TOKEN} snw35/nvchecker:${NVCHECKER_VERSION} nvchecker -c nvchecker.toml
  - docker run -it --rm --name dfupdate --mount type=bind,source=${PWD},target=/data/ -w /data snw35/dfupdate:${DFUPDATE_VERSION}
  - if [[ $(git status --porcelain | wc -l) -eq 0 ]] && [[ -z ${TRAVIS_TAG} ]]; then
      echo "No local changes detected and no tag set, nothing to build, exiting.";
      travis_terminate 0;
    else
      echo "Local changes or tagged commit detected, continuing...";
    fi

before_script:
  - BASE_VERSION=`grep "FROM" Dockerfile | cut -d " " -f 2 | cut -d ":" -f 2`
  - ENV_VERSIONS=`grep "^ENV .*_VERSION .*" Dockerfile | cut -d " " -f 3`
  - PROPOSED_TAG=${ENV_VERSIONS//$'\n'/'-'}-${BASE_VERSION}
  - if [[ -z "${IMAGE_TAG+x}" ]]; then
      DOCKER_TAG=$PROPOSED_TAG;
    else
      DOCKER_TAG=`grep "^ENV $IMAGE_TAG .*" Dockerfile | cut -d " " -f 3`;
    fi
  - if [[ ! -z "${TAG_COMMAND+x}" ]]; then
      DOCKER_TAG=`$TAG_COMMAND`;
    fi
  - IMAGE="${TRAVIS_REPO_SLUG}:${DOCKER_TAG}"
  - git config --local user.name "${DOCKER_USERNAME}"
  - git config --local user.email "snw35@use.startmail.com"
  - git remote add upstream https://${GH_TOKEN}@github.com/${TRAVIS_REPO_SLUG}.git > /dev/null 2>&1
  - if [ $(git ls-remote --tags upstream "${PROPOSED_TAG}" | wc -l) -eq 0 ]; then
      echo "Proposed tag does not exist on remote, continuing.";
    else
      echo "Proposed tag already exists on remote, skipping container build.";
      travis_terminate 0;
    fi

script:
  - env | sort
  - travis_retry docker build -t "$IMAGE" .
  - ~/official-images/test/run.sh "$IMAGE" || travis_terminate 1;
  - docker push "$IMAGE"
  - docker tag "$IMAGE" "${TRAVIS_REPO_SLUG}:latest"
  - docker push "${TRAVIS_REPO_SLUG}:latest"

after_script:
  - docker images

before_deploy:
  - cp new_ver.json old_ver.json
  - git checkout master
  - git add -A
  - git commit --message "Software Updated"
  - git tag $PROPOSED_TAG
  - git push --quiet --set-upstream upstream
  - git push --tags --quiet --set-upstream upstream

deploy:
  provider: releases
  token: "$GH_TOKEN"
  cleanup: false
  release_notes: "$PROPOSED_TAG"

branches:
  except:
  - "/^untagged/"
