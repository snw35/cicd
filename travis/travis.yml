os: linux
dist: focal
services: docker
language: shell

env:
  global:
  - NVCHECKER_VERSION=2.3
  - DFUPDATE_VERSION=0.1.0
  - secure: yERApVslnQUQVg/bgrYoDv5msbXp/l5eekz4oBTAlb3pdXAih0O0uzVqI4r71Kr6xoi2/2J/UR6dpXWiJhJNxLdO1jyz6Z6oEr49X7oisxWS4pb5/gootQRj79EpqvmVUsbeICWEA7qej1sbpHmCHc7fFfQOq/S9xpA6jm6nMTiIJFGn2G+Zmg6vczoSp375sTPRj+eoAxrKKco8cuMlE/HPpZ4PHFhKSPRpyeiGtlJOpIBQDTIfnsOT+FAPVG0Xp09KSaC4kiYJYEQdeJ0f0UUo7MxL7aEhM0MoTod2jKVXdJf6k1EqTkZPk7HuLiDq1n//MeH84hf5s7Yp+9QNFPAdQpC544aVQUmX67HxRB9xYP0JvkSQkf1bj1tcF3pt1SnUQTX7wrcebhqZ3r6XcYB2vzeDxIMAMsnJAbexi77iPv0HavPPwTlf65+fQnELD1cQmd0dzxek9cA0h+q9pgLQ+KQfXpOXwnv1XAhhtaf0mvgWVOo+d9Noub06DajPDdImzBvuW4hQQrfJ7BCqJWNa4o7glm44kmRwJJLl/7MG+6GuT7BeyybufxV26/yIf7eOSQJcibo7sxcoSk9Wtq8bJay+0PDpNUPzfmZkmEQKuvqJ7eVRjt0DH6596RJs33a9V5EvXy4KRDKHkIr4nf7SrT5KSVCMr1FKqI9C1r4=
  - secure: m6gnfKcV8VNZR+6thqoJcxcJjLUUxM2HTOL3TYPaxKQzvEBVKcnjE50AxJfgbqCMJNvSzeMseeCSuW0AsPXDRiGNNWonUSbm6PoIgbvS97amzPnHZEsgn99ejRmXu4baHgggc6/qzIESP6oB3J64R9siuO22DL/JenHx3ATIG9txmcZO4RJ7B8CDik7/xnCBaf19YV2zVWLMdvV4LFOHt6JJWiNk4CxnSqfilYo8j098R/DoVoVBrocitqSQVYRWAPUbTxupd3f40YAidBxSOgRybxC2v4PWWtPUIkstmaHf8IdEVYWyRRU3GCz2Ce4w0/Sv9ILePdBdu4P5g/Ml1/xpJ8xkgTmNl/FJk70N+2IkzR/dG1MNzYuvPEIkkrbvN7TBRh+qhVh7tzPUXqa1xj3kZ1qAtr0kNWy+v9W5ChYCrhvOLDjYf+Fvg5Oov6Ns2ULCE9qG+wpKsUXRrXKorU0KfHh2JxRqsR6ZebICFyY+Q8fimf1aUKt70XoW943rQOeNGnblRpcisRXKmq1vbGssx5TQX5WHRdiGdFFgWwDSf6OYLba8BDdckg951rTfDqckoZyFC1+voihYOmFXI9VV5n9ht7NhnqDi1D/oJa8Zor2aB8wDAI7zUtUNfRsVGsteJKhHHpK5B58dmkUsRIVfyl6DHOSXexVZnx23dFE=
  - secure: MXOCLCOEPOPz9YYkT1zGU04Gx+BiHSopjfFWf3t86eXqcZGypqsGVwRkChSOk4edbQCU/ZbZjV2pEkfRMcq5GJOyfHM5XGxSjp2Suh990Jl0j4sRhJmwGWquuZp6nfdNE+qFKddOt9nqCMtKNi/2W9TclnGny/nR/BlTmVBTzE5NhbUSVQpv0kCC7sVV4yHT5PnafyZAEIoVuKjeY0ZycSMP7Qfdq1ZzR9AQqMFv7i2QRkZBuGZ+U3QoInugLKYg54D0qZO6v8weI4/ft3gtGAAQ78gxpuqcp5VcVIA/VOz5wNl41lOaJ0e5k6Z3kQ/TsmNGWUEn5zXmQcFYI0X0wW0th3U6Po6+7D8rl0bofJqMNrJ/JQH7RijyPrFaX+clXGEqpjUuW6D0yNcPCYn/tclt1lTzeS0y9RHciuF1HQaspNJ4m/aPGyN5zu4j8ojDYJD7vfm/CT85gpA9XzLues0YtR40J/CaL7YBir+IR+eH8X0gg4tLcw/DQdIRaWxzchgBbwExZ6272rXTdgtacJRNjkE4p+sP4XqEimqLp+vKorb2+P2VvElUH+tVqsVafl3SPOmY+NQDANLBtFoSncyqA5J/tHEWcWBZGcr053rxLTtS1D4o/MACtj1Invi1a9g8RsNqITcS5qvXh0FmlNpnNqjjSc0Fo7KZkdiufAg=

install:
  - env | sort
  - echo "$DOCKER_PASSWORD" | docker login -u "$DOCKER_USERNAME" --password-stdin
  - git clone https://github.com/docker-library/official-images.git ~/official-images
  - docker run -it --rm --name nvchecker --mount type=bind,source=${PWD},target=/data/ -w /data -e NVCHECKER_GITHUB_TOKEN=${GH_TOKEN} snw35/nvchecker:${NVCHECKER_VERSION} nvchecker -c nvchecker.toml
  - docker run -it --rm --name dfupdate --mount type=bind,source=${PWD},target=/data/ -w /data snw35/dfupdate:${DFUPDATE_VERSION}
  - if [[ $(git status --porcelain | wc -l) -eq 0 ]] && [[ -z ${TRAVIS_TAG} ]]; then
      echo "No local changes detected and no tag set, nothing to build, exiting.";
      travis_terminate 0;
    else
      echo "Local changes or tagged commit detected, continuing...";
    fi

before_script:
  - BASE_VERSION=`grep "FROM" Dockerfile | cut -d " " -f 2 | cut -d ":" -f 2`
  - ENV_VERSIONS=`grep "^ENV .*_VERSION .*" Dockerfile | cut -d " " -f 3`
  - PROPOSED_TAG=${ENV_VERSIONS//$'\n'/'-'}-${BASE_VERSION}
  - if [[ -z "${IMAGE_TAG+x}" ]]; then
      DOCKER_TAG=$PROPOSED_TAG;
    else
      DOCKER_TAG=`grep "^ENV $IMAGE_TAG .*" Dockerfile | cut -d " " -f 3`;
    fi
  - if [[ ! -z "${TAG_COMMAND+x}" ]]; then
      DOCKER_TAG=`$TAG_COMMAND`;
    fi
  - IMAGE="${TRAVIS_REPO_SLUG}:${DOCKER_TAG}"
  - git config --local user.name "${DOCKER_USERNAME}"
  - git config --local user.email "snw35@use.startmail.com"
  - git remote add upstream https://${GH_TOKEN}@github.com/${TRAVIS_REPO_SLUG}.git > /dev/null 2>&1
  - if [ $(git ls-remote --tags upstream "${PROPOSED_TAG}" | wc -l) -eq 0 ]; then
      echo "Proposed tag does not exist on remote, continuing.";
    else
      echo "Proposed tag already exists on remote, skipping container build.";
      travis_terminate 0;
    fi

script:
  - env | sort
  - travis_retry docker build -t "$IMAGE" .
  - ~/official-images/test/run.sh "$IMAGE" || travis_terminate 1;
  - docker push "$IMAGE"
  - docker tag "$IMAGE" "${TRAVIS_REPO_SLUG}:latest"
  - docker push "${TRAVIS_REPO_SLUG}:latest"

after_script:
  - docker images

before_deploy:
  - cp new_ver.json old_ver.json
  - git checkout master
  - git add -A
  - git commit --message "Software Updated"
  - git tag $PROPOSED_TAG
  - git push --quiet --set-upstream upstream
  - git push --tags --quiet --set-upstream upstream

deploy:
  provider: releases
  token: "$GH_TOKEN"
  cleanup: false
  release_notes: "$PROPOSED_TAG"

branches:
  except:
  - "/^untagged/"
